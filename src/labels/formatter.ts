import {info} from '@actions/core'
import {Label, LabelType, LogicalLabel} from '../types'

const parseLabel = (formattedString: string): Label => {
  const key = formattedString.split('=')[0]
  const [name, color] = key.split('|')
  return {
    name,
    description: `PR-Labeler autogenerated ${name} label`,
    color
  } as Label
}

const parseLogicalLabel = (
  formattedString: string,
  labelType: LabelType
): LogicalLabel => {
  const [key, condition] = formattedString.split('=')
  const [name, color] = key.split('|')
  return {
    name,
    description: `PR-Labeler autogenerated ${name} label`,
    color,
    condition:
      labelType === LabelType.SIZE && condition.length === 0
        ? Number.MAX_SAFE_INTEGER.toString()
        : condition,
    type: labelType
  } as LogicalLabel
}

export const parseLabels = (formattedString: string): Label[] => {
  return formattedString.split(',').map(v => parseLabel(v))
}

const parseLogicalLabelsFromFormattedString = (
  formattedString: string,
  labelType: LabelType
): LogicalLabel[] => {
  return formattedString.split(',').map(v => parseLogicalLabel(v, labelType))
}

export const getLabelForChangeSize = (
  changeSize: number,
  sizeLabels: string
): Label => {
  const possibleLabels: LogicalLabel[] = parseLogicalLabelsFromFormattedString(
    sizeLabels,
    LabelType.SIZE
  )
  possibleLabels.sort((a, b) => parseInt(a.condition) - parseInt(b.condition))
  for (const label of possibleLabels) {
    info(`label: ${label.name}, condition: ${label.condition}`)
    if (parseInt(label.condition) > changeSize) {
      return label
    }
  }
  throw new Error(`Unexpected error while retrieving label for pull request.`)
}
